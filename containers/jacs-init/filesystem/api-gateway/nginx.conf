# OpenResty Configuration

worker_processes  4;

error_log  logs/error.log  info;

events {
    worker_connections  1024;
}

env NGINX_SERVERNAME;              # Server name
env JWT_SECRET;                    # Your JWT secret. No default
env JWT_SECRET_IS_BASE64_ENCODED;  # Indicate if this secret is base64 encoded already. Default is false
env AUTHORIZATION_HEADER;          # The Authorization header to look for. ie: "Authorization: ".  Default is "Authorization"
env AUTHORIZATION_PREFIX;          # The Authorization prefix to look for: ie. "Bearer "  - (example: "Authorization: Bearer abcdefgh12345...".  Default is "Bearer"
env LOG_TOKEN;                     # Optionally enable logging of the token for debugging. Default is false.
env JACS_ASYNC_HOST;               # JACS async server
env JACS_ASYNC_PORT;

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Docker DNS resolver
    resolver 127.0.0.11;

    # Default NGINX access log format for reference
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    log_format upstream '$remote_addr "$http_username" "$http_application_id" [$time_local] '
                        '$request status=$status request_bytes=$request_length response_bytes=$bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'ua=$upstream_addr rt=$request_time uct=$upstream_connect_time uht=$upstream_header_time urt=$upstream_response_time';
    access_log  logs/access.log  upstream;

    # Move temp files into a single directory so that they can be externalized outside of Docker
    client_body_temp_path /usr/local/openresty/nginx/tmp/client-body;
    proxy_temp_path       /usr/local/openresty/nginx/tmp/proxy;
    fastcgi_temp_path     /usr/local/openresty/nginx/tmp/fastcgi;
    uwsgi_temp_path       /usr/local/openresty/nginx/tmp/uwsgi;
    scgi_temp_path        /usr/local/openresty/nginx/tmp/scgi;

    # Larger buffers so that things stay in memory, rather than swapping to disk
    proxy_buffers 16 512k;
    proxy_buffer_size 128k;
    client_body_buffer_size 50M;
    client_max_body_size 512M;

    # Reduce likelihood of 504 Gateway Timeout errors
    proxy_connect_timeout       60s;
    proxy_send_timeout          600s;
    proxy_read_timeout          600s;
    send_timeout                600s;

    server {
        server_name localhost;
        listen 443 ssl;

        # from https://medium.com/@mvuksano/how-to-properly-configure-your-nginx-for-tls-564651438fe0
        ssl_certificate           /app/certs/cert.crt;
        ssl_certificate_key       /app/certs/cert.key;
        ssl_session_cache         shared:SSL:40m;
        ssl_session_timeout       4h;
        ssl_protocols             TLSv1.2 TLSv1.3;
        ssl_ciphers               ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
        ssl_prefer_server_ciphers on;

        # If you add a service here, you also need to update the index at
        # containers/api-gateway/html/index.html
        location /SCSW {
            root   html;
            index  index.html index.htm;
        }

        # Externally mounted console properties
        location =/SCSW/ServiceDiscovery/v1/properties {
            alias html/external/client.properties;
        }

        # Externally mounted cert - this is only available when deployed on aws
        location =/SCSW/cert.crt {
            alias html/external/cert.crt;
        }

        # Trailing slashes are needed on both location and proxy_pass here,
        # otherwise the location URL is sent to the proxy.
        location ~ ^/SCSW/AuthenticationService/v1/(.*)$ {
            set $upstream jacs-sync:8080;
            proxy_pass http://$upstream/api/rest-v2/auth/$1$is_args$args;
            include api.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/WorkstationMetadata/v1/(.*)$ {
            set $upstream jacs-dev.int.janelia.org:8180;
            proxy_pass http://$upstream/rest-v1/$1$is_args$args;
            include api.conf;
            include jwt.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/WorkstationMetadata/v2/(.*)$ {
            set $upstream jacs-dev.int.janelia.org:8180;
            proxy_pass http://$upstream/rest-v2/$1$is_args$args;
            include api.conf;
            include jwt.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/WorkstationMetadata/v3/(.*)$ {
            set $upstream jacs-dev.int.janelia.org:8180;
            proxy_pass http://$upstream/rest-v3/$1$is_args$args;
            include api.conf;
            include jwt.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/JaneliaFileServices/v1/(.*)$ {
            set $upstream jacs-webdav1.int.janelia.org:8880;
            proxy_pass http://$upstream/JFS/$1$is_args$args;
            include api.conf;
            include jwt.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/JACS2SyncServices/v2/docs/(.*)$ {
            set $upstream jacs-sync:8080;
            proxy_pass http://$upstream/docs/$1$is_args$args;
            include api.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/JACS2SyncServices/v2/(.*)$ {
            set $upstream jacs-sync:8080;
            proxy_pass http://$upstream/api/rest-v2/$1$is_args$args;
            include api.conf;
            include jwt.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/JACS2OpenSyncServices/v2/(.*)$ {
            set $upstream jacs-sync:8080;
            proxy_pass http://$upstream/api/rest-v2/unauthenticated/$1$is_args$args;
            include api.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/JACS2AsyncServices/v2/(.*)$ {
            set_by_lua $upstreamhost 'return os.getenv("JACS_ASYNC_HOST")';
            set_by_lua $upstreamport 'return os.getenv("JACS_ASYNC_PORT")';
            proxy_pass http://$upstreamhost:$upstreamport/api/rest-v2/$1$is_args$args;
            include jwt.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/JACS2OpenAsyncServices/v2/(.*)$ {
            set_by_lua $upstreamhost 'return os.getenv("JACS_ASYNC_HOST")';
            set_by_lua $upstreamport 'return os.getenv("JACS_ASYNC_PORT")';
            proxy_pass http://$upstreamhost:$upstreamport/api/rest-v2/unautheticated/$1$is_args$args;
            include api.conf;
            include cors.conf;
        }

        location ~ ^/SCSW/SageResponder/v2/(.*)$ {
            set $upstream sage_responder.int.janelia.org;
            proxy_pass http://$upstream/$1$is_args$args;
            # Setting host makes the redirect break 
            #include api.conf;
            include jwt.conf;
            include cors.conf;
            # This is needed because SAGE Responder redirects to add a trailing slash on everything. We need to follow that redirect internally.
            proxy_intercept_errors on;
            error_page 301 302 307 = @handle_redirect;
        }

        location ~ ^/SCSW/JADEServices/v1/(.*)$ {
            set $upstream jade-master:8080;
            proxy_pass http://$upstream/jacsstorage/master_api/v1/$1$is_args$args;
            include api.conf;
            include cors.conf;
        }

        # The workstation-site is served at the root, if nothing else matches
        location / {
            set $upstream workstation-site:8080;
            proxy_pass http://$upstream$uri$is_args$args;
        }

        location @handle_redirect {
            set $saved_redirect_location '$upstream_http_location';
            proxy_pass $saved_redirect_location;
        }
    }
    server {
        server_name localhost;
        listen      80;
        # Shouldn't need this, but without it, upgrade gets redirected to workstation-site. Insanity.
        location = /upgrade {
            return 301 https://$host/manual/install.html;
        }
        # Translate old upgrade URLs from legacy client
        location = /manual/macosx_upgrade.html {
            return 301 https://$host/manual/macosx_install.html;
        }
        location = /manual/linux_upgrade.html {
            return 301 https://$host/manual/linux_install.html;
        }
        location = /manual/windows_upgrade.html {
            return 301 https://$host/manual/windows_install.html;
        }
        # For all other requests, redirect from HTTP to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    server {
        server_name localhost;
        listen      8080;
        location / {
            set $upstream jacs-dashboard:8080;
            proxy_pass http://$upstream/$uri$is_args$args;
        }
    }
    server {
        server_name localhost;
        listen      8090;
        location / {
            set $upstream ipp:8000;
            uwsgi_pass $upstream;
            uwsgi_read_timeout 300;
            include uwsgi_params;
        }
    }
}
