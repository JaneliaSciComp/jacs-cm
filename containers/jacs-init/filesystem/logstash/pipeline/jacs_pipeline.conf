input {
    beats {
        port => "5044"
    }
}

filter {
    if [fields][type] == "jacs" {
        mutate {
            strip => "message"
        }
        grok {
            match => {
                "message" => "^(?<logdate>\S+) \[(?<thread>[^\]]+)\] %{LOGLEVEL:log_level}\s+(?<classname>\S+)( \[service=%{DATA:jacs_service}\])?( \[rootService=%{DATA:jacs_root_service}\])? - %{IPV4} %{USERNAME:username} %{USERNAME:run_user} '%{DATA:application_id}' %{WORD:method} %{URI:access_url} %{DATA:query_string} status=%{NUMBER:response_code:integer} response_bytes=%{NUMBER:response_bytes:integer} rt=%{NUMBER:request_time:float} tp=%{NUMBER:throughput:float} '%{DATA:useragent}'\s?%{GREEDYDATA:request_body}"
            }
            add_field => [ "received_at", "%{@timestamp}" ]
        }
        date {
            match => ["logdate", "yyyy-MM-dd_HH:mm:ss.SSS", "ISO8601"]
        }
    }
}

filter {
    if [fields][type] == "api_gateway" {
       mutate {
           strip => "message"
       }
       grok {
           match => { "message" => ["%{IPORHOST:remote_ip} \"%{DATA:username}\" \"%{DATA:application_id}\" \[%{HTTPDATE:access_time}\] %{WORD:method} %{URIPATHPARAM:access_url} HTTP/%{NUMBER:http_version} status=%{NUMBER:response_code} request_bytes=%{NUMBER:request_bytes} response_bytes=%{NUMBER:response_bytes} \"%{DATA:referrer}\" \"%{DATA:useragent}\" ua=%{DATA:unstream_addr} rt=%{DATA:request_time:float} uct=%{DATA:upstream_connect_time:float} uht=%{DATA:upstream_header_time:float} urt=%{DATA:upstream_response_time:float}"] }
       }
       mutate {
           add_field => { "received_at" => "%{@timestamp}" }
       }
       if [username] =~ /^user:/ {
         mutate {
           gsub => [
             "username", "user:", ""
           ]
         }
       }
       date {
           match => [ "access_time", "dd/MMM/YYYY:H:m:s Z" ]
           remove_field => "access_time"
       }
       geoip {
           source => "remote_ip"
           target => "geoip"
       }
    }
}

filter {
    if [fields][type] == "solr" {
        mutate {
            strip => "message"
        }
        grok {
            match => {
                "message" => "^(?<logdate>.+) \[%{LOGLEVEL:log_level}\] (?<classname>\S+) - %{GREEDYDATA:request_body}"
            }
            add_field => [ "received_at", "%{@timestamp}" ]
        }
        date {
            match => ["logdate", "yyyy-MM-dd HH:mm:ss"]
        }
    }
}

filter {
    if [type] == "jbosslog" {
        mutate {
          strip => "message"
        }
        grok {
          match => {
            "message" => "^%{TIMESTAMP_ISO8601:logdate} %{LOGLEVEL:loglevel}%{SPACE} \[(?<classname>[^\]]+)\] %{DATA:msgbody}(%{SPACE}\[CONTEXT: task %{POSINT:task} \(child of %{POSINT:parentTask}\)(, sample %{DATA:sampleName})?\])?$"
          }
          add_field => [ "received_at", "%{@timestamp}" ]
        }
        date {
          match => ["logdate", "yyyy-MM-dd HH:mm:ss,SSS"]
          timezone => "US/Eastern"
        }
    }
}

output {
    elasticsearch {
        hosts => [ "esmaster1:9200", "esmaster2:9200", "esmaster3:9200" ]
        index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    }
}
